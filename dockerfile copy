# # installs node.js image
# FROM node:16.13.1-alpine3.14

# # sets the working directory for any RUN, CMD, COPY command
# # all files we put in the Docker container running the server will be in /usr/src/app (e.g. /usr/src/app/package.json)
# WORKDIR /usr/src/app

# # Copies package.json, package-lock.json, tsconfig.json, .env to the root of WORKDIR
# COPY ["package.json", "package-lock.json", "tsconfig.json", ".env", "./"]

# # Copies everything in the src directory to WORKDIR/src
# COPY ./src ./src

# # Installs all packages
# RUN npm install

# # Runs the dev npm script to build & start the server
# CMD npm run dev



# FROM node:16-alpine

# WORKDIR /usr/src/app

# # Install app dependencies
# COPY ["package.json", "yarn.lock", "./"]
# RUN yarn install 
# RUN yarn migration:run 
# # If you are building your code for production
# # RUN npm ci --only=production

# # Bundle app source
# COPY . .

# EXPOSE 3001

# RUN chown -R node /usr/src/app
# USER node

# CMD ["yarn", "start"]

FROM node:16.13.2-alpine3.15

WORKDIR /data

RUN apk --no-cache add nginx supervisor \
    && mkdir -p /etc/nginx/sites-available /autostart/ /var/cache/nginx \
    && chmod 777 /var/cache/nginx

# # Configure nginx
# COPY ./cnf/nginx/nginx.conf /etc/nginx/nginx.conf
# COPY ./cnf/nginx/node.conf /sites/node.conf

# # Configure supervisord
# COPY ./cnf/supervisor/supervisord.conf /etc/supervisor/conf.d/
# COPY ./cnf/supervisor/init.d/* /autostart/

COPY . /data

RUN yarn install
RUN yarn build

RUN npm install --platform=linux --arch=x64 sharp

CMD ["node", "dist/main.js"]
# CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
