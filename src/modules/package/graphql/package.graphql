enum PackageStatus {
  new
  pickup
  intransit
  delivered
  canceled
  archived
}

type Package {
  id: Int!
  user: User!
  from: City!
  to: City!
  sendDate: Date!
  deliveryDate: Date!
  fee: Int!
  comment: String
  contents: String!
  weight: Int!
  order: Order
  images: [File!]
  status: PackageStatus!
}

input PackageInput {
  fromId: Int!
  toId: Int!
  sendDate: Date!
  deliveryDate: Date!
  fee: Int!
  comment: String
  contents: String!
  weight: Int!
  imageIds: [Int!]!
}

input PackagesFilter {
  fromId: Int!
  toId: Int!
  date: String!
  maximumWeight: Int
}

input MyPackagesFilter {
  status: PackageStatus!
}

type NewPackageItem {
  package: Package!
  incomingOffers: OffersResponse!
  outgoingOffers: OffersResponse!
}

type NewPackagesResponse {
  list: [NewPackageItem!]!
  total: Int!
}

type PackagesResponse {
  list: [Package!]!
  total: Int!
}

type Query {
  myNewPackages: NewPackagesResponse!
  myActivePackages: PackagesResponse!
  packages(filter: PackagesFilter): PackagesResponse!
}

type Mutation {
  createPackage(input: PackageInput!): Package!
  cancelPackage(id: Int!): Boolean!
}
